[{"/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/index.js":"1","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/reportWebVitals.js":"2","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/App.js":"3","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/NavBar.js":"4","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/AboutUs.js":"5","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/contexts/AuthProvider.js":"6","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/firebase.js":"7","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/Preference.js":"8","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/SignUp.js":"9","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/Login.js":"10","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/ForgotPassword.js":"11","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/Register.js":"12"},{"size":500,"mtime":1615569332800,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1615569332801,"results":"15","hashOfConfig":"14"},{"size":1088,"mtime":1616380974873,"results":"16","hashOfConfig":"14"},{"size":4470,"mtime":1616380916932,"results":"17","hashOfConfig":"14"},{"size":1510,"mtime":1615750355385,"results":"18","hashOfConfig":"14"},{"size":1243,"mtime":1616380916938,"results":"19","hashOfConfig":"14"},{"size":574,"mtime":1615750355389,"results":"20","hashOfConfig":"14"},{"size":3481,"mtime":1616438821762,"results":"21","hashOfConfig":"14"},{"size":3461,"mtime":1616380916935,"results":"22","hashOfConfig":"14"},{"size":2947,"mtime":1616380916930,"results":"23","hashOfConfig":"14"},{"size":2641,"mtime":1616380916930,"results":"24","hashOfConfig":"14"},{"size":2817,"mtime":1616380921262,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"tlw0vj",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},"/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/index.js",[],["57","58"],"/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/reportWebVitals.js",[],"/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/App.js",[],"/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/NavBar.js",["59","60"],"import React, { useState } from 'react'\nimport { useAuth } from \"../contexts/AuthProvider\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nconst NavBar = () => {\n\n    const onClick = (event) => {\n        event.preventDefault();\n        const val = document.getElementById('searchValue').value;\n        alert(`The Movie/TV Show search is: ${val}`);\n    }\n\n    const {user, logOut} = useAuth();\n    const [error, setError] = useState('');\n    const history = useHistory();\n\n    const customToggle = React.forwardRef(({children, onClick}, ref) => (\n        <a\n            href=\"\"\n            ref={ref}\n            onClick={e => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"white\"\n                 className=\"bi bi-person-circle\" viewBox=\"0 0 16 16\">\n                <path d=\"M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z\"/>\n                <path fillRule=\"evenodd\"\n                      d=\"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z\"/>\n            </svg>\n            {children}\n        </a>\n    ));\n\n    async function signOutHandler(event) {\n        setError('');\n        try {\n            await logOut();\n            history.pushState('/');\n        } catch {\n            setError('Failed to sign out.');\n        }\n    }\n\n    return (\n        <div className='container'>\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav mr-auto col-3\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"/\">Home</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"/aboutuspage\">About Us</a>\n                        </li>\n                    </ul>\n                    <form className=\"form-inline my-2 my-lg-0 col-6\">\n                        <label htmlFor=\"searchValue\"></label>\n                        <input className=\"form-control mr-sm-2 col-8\" type=\"search\" placeholder=\"Search Movies/TV Shows\"\n                               aria-label=\"Search\" id=\"searchValue\"/>\n                        <button className=\"btn btn-outline-primary my-2 my-sm-0\" type=\"submit\"\n                                onClick={onClick}>Search\n                        </button>\n                    </form>\n                    <ul className=\"navbar-nav mr-auto\">\n                        {user != null\n                            ? <>\n                                <li className=\"nav-item\">\n                                    <Dropdown>\n                                        <Dropdown.Toggle as={customToggle} id=\"dropdown-custom-components\">\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item eventKey=\"1\">\n                                                <Link to='/profile'>Profile</Link>\n                                            </Dropdown.Item>\n                                            <Dropdown.Item eventKey=\"2\">\n                                                <Link to='/account'>Account</Link>\n                                            </Dropdown.Item>\n                                            <Dropdown.Item eventKey=\"3\" onClick={signOutHandler}>\n                                                Sign Out\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </li>\n                            </>\n                            : <>\n                                <li className=\"nav-item\">\n                                    <a className=\"nav-link\" href=\"/login\">Log In</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <a className=\"nav-link\" href=\"/signup\">Sign Up</a>\n                                </li>\n                            </>\n                        }\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    )\n}\n\nexport default NavBar\n","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/AboutUs.js",[],"/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/contexts/AuthProvider.js",[],"/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/firebase.js",[],"/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/Preference.js",["61","62","63","64","65","66","67","68","69","70"],"/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/SignUp.js",["71"],"import { Form, Button, Card, Alert } from 'react-bootstrap'\nimport { useRef, useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthProvider\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nconst SignUp = () => {\n\n    const emailRef = useRef();\n    const passwordRef = useRef();\n    const passwordConfirmRef = useRef();\n    const {signUp, user} = useAuth();\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n\n\n    async function signUpHandler(event) {\n        event.preventDefault();\n\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n            return setError('Passwords do not match.');\n        }\n\n        try {\n            setError('');\n            setLoading(true);\n            await signUp(\n                emailRef.current.value,\n                passwordRef.current.value\n            );\n            history.push('/');\n        } catch {\n            setError('Failed to create an account.');\n        }\n\n        setLoading(false);\n    }\n\n    return (\n        <>\n            <div style={{display: 'flex', justifyContent:'center', alignContent:'center'}}>\n                <Card style={{minWidth: 600}}>\n                    <Card.Body>\n                        <h1 style={{textAlign: 'center'}}>Sign Up</h1>\n                        {error && <Alert variant='danger'>{error}</Alert>}\n                        <Form onSubmit={signUpHandler}>\n                            <Form.Group id='email'>\n                                <Form.Label>Email Address</Form.Label>\n                                <Form.Control\n                                    type='email'\n                                    placeholder='Enter email'\n                                    ref={emailRef}\n                                    required\n                                />\n                            </Form.Group>\n\n                            <Form.Group id='password'>\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control\n                                    type='password'\n                                    placeholder='Password'\n                                    ref={passwordRef}\n                                    required\n                                />\n                            </Form.Group>\n\n                            <Form.Group controlId='formBasicPassword'>\n                                <Form.Label>Confirm Password</Form.Label>\n                                <Form.Control\n                                    type='password'\n                                    placeholder='Password'\n                                    ref={passwordConfirmRef}\n                                    required\n                                />\n                            </Form.Group>\n\n                            <Button\n                                disabled={loading}\n                                className='w-100'\n                                as=\"input\"\n                                type=\"submit\"\n                                value=\"Submit\"\n                            />\n                        </Form>\n                    </Card.Body>\n                </Card>\n            </div>\n            <div className='w-100 text-center mt-2'>\n                Already have an account? <Link to='/login'>Log In</Link>\n            </div>\n        </>\n    );\n}\n\nexport default SignUp;","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/Login.js",["72"],"import { Form, Button, Card, Alert } from 'react-bootstrap'\nimport { useRef, useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthProvider\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nconst Login = () => {\n\n    const emailRef = useRef();\n    const passwordRef = useRef();\n    const {logIn, user} = useAuth();\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n\n\n    async function logInHandler(event) {\n        event.preventDefault();\n\n        try {\n            setError('');\n            setLoading(true);\n            await logIn(\n                emailRef.current.value,\n                passwordRef.current.value\n            );\n            history.push('/');\n        } catch {\n            setError('Failed to sign in.');\n        }\n\n        setLoading(false);\n    }\n\n    return (\n        <>\n            <div style={{display: 'flex', justifyContent:'center', alignContent:'center'}}>\n                <Card style={{minWidth: 600}}>\n                    <Card.Body>\n                        <h1 style={{textAlign: 'center'}}>Log In</h1>\n                        {error && <Alert variant='danger'>{error}</Alert>}\n                        <Form onSubmit={logInHandler}>\n                            <Form.Group id='email'>\n                                <Form.Label>Email Address</Form.Label>\n                                <Form.Control\n                                    type='email'\n                                    placeholder='Enter email'\n                                    ref={emailRef}\n                                    required\n                                />\n                            </Form.Group>\n\n                            <Form.Group id='password'>\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control\n                                    type='password'\n                                    placeholder='Password'\n                                    ref={passwordRef}\n                                    required\n                                />\n                            </Form.Group>\n\n                            <Button\n                                disabled={loading}\n                                className='w-100'\n                                as=\"input\"\n                                type=\"submit\"\n                                value=\"Submit\"\n                            />\n                        </Form>\n                        <div className='w-100 text-center mt-4'>\n                            <Link to='/forgot-password'>Forgot Password</Link>\n                        </div>\n                    </Card.Body>\n                </Card>\n            </div>\n            <div className='w-100 text-center mt-2'>\n                Don't have an account? <Link to='/signup'>Sign Up</Link>\n            </div>\n        </>\n    );\n}\n\nexport default Login;","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/ForgotPassword.js",["73"],"import { Form, Button, Card, Alert } from 'react-bootstrap'\nimport { useRef, useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthProvider\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nconst ForgotPassword = () => {\n\n    const emailRef = useRef();\n    const {resetPassword} = useAuth();\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n\n\n    async function resetPasswordHandler(event) {\n        event.preventDefault();\n\n        try {\n            setSuccess('');\n            setError('');\n            setLoading(true);\n            await resetPassword(\n                emailRef.current.value\n            );\n            setSuccess('Check your email to reset password');\n        } catch {\n            setError('Failed to reset password.');\n        }\n\n        setLoading(false);\n    }\n\n    return (\n        <>\n            <div style={{display: 'flex', justifyContent:'center', alignContent:'center'}}>\n                <Card style={{minWidth: 600}}>\n                    <Card.Body>\n                        <h1 style={{textAlign: 'center'}}>Reset Password</h1>\n                        {error && <Alert variant='danger'>{error}</Alert>}\n                        {success && <Alert variant='success'>{success}</Alert>}\n                        <Form onSubmit={resetPasswordHandler}>\n                            <Form.Group id='email'>\n                                <Form.Label>Email Address</Form.Label>\n                                <Form.Control\n                                    type='email'\n                                    placeholder='Enter email'\n                                    ref={emailRef}\n                                    required\n                                />\n                            </Form.Group>\n\n                            <Button\n                                disabled={loading}\n                                className='w-100'\n                                as=\"input\"\n                                type=\"submit\"\n                                value=\"Submit\"\n                            />\n                        </Form>\n                        <div className='w-100 text-center mt-4'>\n                            <Link to='/login'>Login</Link>\n                        </div>\n                    </Card.Body>\n                </Card>\n            </div>\n            <div className='w-100 text-center mt-2'>\n                Don't have an account? <Link to='/signup'>Sign Up</Link>\n            </div>\n        </>\n    );\n}\n\nexport default ForgotPassword;","/Users/neelkaturi/Workspace/netflix/PROJECT_FOS/frontend/src/components/Register.js",["74"],"import { Form, Button, Card, Alert } from 'react-bootstrap'\nimport { useRef, useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthProvider\";\n\nconst Register = () => {\n\n    const emailRef = useRef();\n    const passwordRef = useRef();\n    const passwordConfirmRef = useRef();\n    const {signUp, user} = useAuth();\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n\n\n    async function signUpHandler(event) {\n        event.preventDefault();\n\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n            return setError('Passwords do not match.');\n        }\n\n        try {\n            setError('');\n            setLoading(true);\n            await signUp(\n                emailRef.current.value,\n                passwordRef.current.value\n            );\n        } catch {\n            setError('Failed to create an account.');\n        }\n\n        setLoading(false);\n    }\n\n    return (\n        <Card>\n            <Card.Body>\n                {error && <Alert variant='danger'>{error}</Alert>}\n\n                <Form onSubmit={signUpHandler}>\n                    <Form.Group id='email'>\n                        <Form.Label>Email Address</Form.Label>\n                        <Form.Control\n                            type='email'\n                            placeholder='Enter email'\n                            ref={emailRef}\n                            required\n                        />\n                        <Form.Text className='text-muted'>\n                            We'll never share your email with anyone else.\n                        </Form.Text>\n                    </Form.Group>\n\n                    <Form.Group id='password'>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n                            type='password'\n                            placeholder='Password'\n                            ref={passwordRef}\n                            required\n                        />\n                    </Form.Group>\n\n                    <Form.Group controlId='formBasicPassword'>\n                        <Form.Label>Confirm Password</Form.Label>\n                        <Form.Control\n                            type='password'\n                            placeholder='Password'\n                            ref={passwordConfirmRef}\n                            required\n                        />\n                    </Form.Group>\n\n                    <Button\n                        disabled={loading}\n                        className='w-100'\n                        as=\"input\"\n                        type=\"submit\"\n                        value=\"Submit\"\n                    />\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Register;",["75","76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":15,"column":12,"nodeType":"83","messageId":"84","endLine":15,"endColumn":17},{"ruleId":"85","severity":1,"message":"86","line":19,"column":9,"nodeType":"87","endLine":26,"endColumn":10},{"ruleId":"81","severity":1,"message":"88","line":1,"column":30,"nodeType":"83","messageId":"84","endLine":1,"endColumn":35},{"ruleId":"81","severity":1,"message":"89","line":4,"column":17,"nodeType":"83","messageId":"84","endLine":4,"endColumn":26},{"ruleId":"81","severity":1,"message":"90","line":4,"column":46,"nodeType":"83","messageId":"84","endLine":4,"endColumn":55},{"ruleId":"81","severity":1,"message":"82","line":18,"column":12,"nodeType":"83","messageId":"84","endLine":18,"endColumn":17},{"ruleId":"81","severity":1,"message":"91","line":18,"column":19,"nodeType":"83","messageId":"84","endLine":18,"endColumn":27},{"ruleId":"81","severity":1,"message":"92","line":19,"column":12,"nodeType":"83","messageId":"84","endLine":19,"endColumn":20},{"ruleId":"81","severity":1,"message":"93","line":19,"column":22,"nodeType":"83","messageId":"84","endLine":19,"endColumn":33},{"ruleId":"81","severity":1,"message":"94","line":20,"column":12,"nodeType":"83","messageId":"84","endLine":20,"endColumn":17},{"ruleId":"81","severity":1,"message":"95","line":20,"column":19,"nodeType":"83","messageId":"84","endLine":20,"endColumn":27},{"ruleId":"81","severity":1,"message":"96","line":47,"column":9,"nodeType":"83","messageId":"84","endLine":47,"endColumn":23},{"ruleId":"81","severity":1,"message":"97","line":11,"column":20,"nodeType":"83","messageId":"84","endLine":11,"endColumn":24},{"ruleId":"81","severity":1,"message":"97","line":10,"column":19,"nodeType":"83","messageId":"84","endLine":10,"endColumn":23},{"ruleId":"81","severity":1,"message":"98","line":13,"column":11,"nodeType":"83","messageId":"84","endLine":13,"endColumn":18},{"ruleId":"81","severity":1,"message":"97","line":10,"column":20,"nodeType":"83","messageId":"84","endLine":10,"endColumn":24},{"ruleId":"77","replacedBy":"99"},{"ruleId":"79","replacedBy":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Alert' is defined but never used.","'Component' is defined but never used.","'useEffect' is defined but never used.","'setError' is assigned a value but never used.","'isLoaded' is assigned a value but never used.","'setIsLoaded' is assigned a value but never used.","'items' is assigned a value but never used.","'setItems' is assigned a value but never used.","'genreSelection' is assigned a value but never used.","'user' is assigned a value but never used.","'history' is assigned a value but never used.",["101"],["102"],"no-global-assign","no-unsafe-negation"]